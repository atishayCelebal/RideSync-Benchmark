server:
  port: 8080

spring:
  application:
    name: ridesync-benchmark
  
  datasource:
    url: jdbc:postgresql://localhost:5432/ridesync
    username: ridesync
    password: ridesync
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect
        format_sql: true
  
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: ridesync-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.ridesync.model"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# JWT Configuration
jwt:
  secret: hello-world
  expiration: 86400000 # 24 hours

# RideSync Configuration
ridesync:
  stationary:
    threshold: 180 # seconds - hardcoded for T20 bug
  anomaly:
    detection:
      enabled: true
      batch-size: 100
  websocket:
    reconnect:
      delay: 5000 # ms
    fallback:
      polling-interval: 10000 # ms

logging:
  level:
    com.ridesync: DEBUG
    org.springframework.kafka: INFO
    org.springframework.security: DEBUG
